// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2020-03-28 17:26:36.156786 -0700 PDT m=+0.002824760
package writers

import (
	html "html/template"
	"log"
	text "text/template"
)

var (
	handlerTemplate *text.Template
	indexTemplate *html.Template
	muxTemplate *text.Template
	partialTemplate *html.Template
	routesTemplate *text.Template
	startTemplate *text.Template
	
)

func init() {
	var err error
	handlerTemplate, err = text.New("templates/handler.go.tmpl").Parse(handlerTempl)
	if err != nil {
		log.Fatal(err)
	}
	indexTemplate, err = html.New("templates/index.html.tmpl").Delims("[[", "]]").Parse(indexTempl)
	if err != nil {
		log.Fatal(err)
	}
	muxTemplate, err = text.New("templates/mux.go.tmpl").Parse(muxTempl)
	if err != nil {
		log.Fatal(err)
	}
	partialTemplate, err = html.New("templates/partial.html.tmpl").Delims("[[", "]]").Parse(partialTempl)
	if err != nil {
		log.Fatal(err)
	}
	routesTemplate, err = text.New("templates/routes.go.tmpl").Parse(routesTempl)
	if err != nil {
		log.Fatal(err)
	}
	startTemplate, err = text.New("templates/start.go.tmpl").Parse(startTempl)
	if err != nil {
		log.Fatal(err)
	}
	
}

// templates/handler.go.tmpl
var handlerTempl = `package {{ .PageName }}

import (
	"net/http"

	"github.com/rur/treetop"
)

{{ if .ViewHandlers -}}
// -------------------------
// {{.PageName}} View Handlers
// -------------------------
{{ end }}
{{ range $index, $handler := .ViewHandlers }}
// {{ $handler.Info }} {{ $handler.Type }}{{ if $handler.Extends }}
// Extends: {{ $handler.Extends }}{{ end }}
// Method: {{ $handler.Method }}{{ if $handler.Doc }}
// Doc: {{ $handler.Doc }}
{{- end }}
func {{ $handler.Identifier }}(rsp treetop.Response, req *http.Request) interface{} {
	data :=  struct {
		HandlerInfo string{{ range $index, $block := .Blocks }}
		{{ $block.FieldName }} interface{}
		{{- end }}
	}{
		HandlerInfo: "{{ $handler.Info }}",{{ range $index, $block := .Blocks }}
		{{ $block.FieldName }}: rsp.HandleSubView("{{ $block.Name }}", req),
		{{- end }}
	}
	return data
}
{{ end }}

{{ if .BlockHandlers -}}
// -------------------------
// {{.PageName}} Block Handlers
// -------------------------
{{ end }}
{{ range $index, $handler := .BlockHandlers }}
// {{ $handler.Info }} {{ $handler.Type }}{{ if $handler.Extends }}
// Extends: {{ $handler.Extends }}{{ end }}
// Method: {{ $handler.Method }}{{ if $handler.Doc }}
// Doc: {{ $handler.Doc }}
{{- end }}
func {{ $handler.Identifier }}(rsp treetop.Response, req *http.Request) interface{} {
	data :=  struct {
		HandlerInfo string{{ range $index, $block := .Blocks }}
		{{ $block.FieldName }} interface{}
		{{- end }}
	}{
		HandlerInfo: "{{ $handler.Info }}",{{ range $index, $block := .Blocks }}
		{{ $block.FieldName }}: rsp.HandleSubView("{{ $block.Name }}", req),
		{{- end }}
	}
	return data
}
{{ end }}
`

// templates/index.html.tmpl
var indexTempl = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Page [[ .Title ]]</title>
</head>
<body>
    <ul>[[ range $link := .SiteLinks ]]
        [[ if $link.Active ]]<li><a href="[[ $link.URI ]]">[[ $link.Label ]]</a></li>[[ else ]]
        <li>[[ $link.Label ]]</li>[[ end ]][[ end ]]
    </ul>
    <h1>[[ .Title ]] page</h1>[[ range $index, $block := .Blocks ]]
    <h2>Block [[ $block.Name ]]</h2>
    <ul>[[ range $partial := $block.Partials ]][[ if $partial.Path ]][[ if $partial.Fragment ]]
        <li><button treetop-link="[[ $partial.Path ]]">[[ $partial.Name ]][[ if $partial.Default ]]*[[end]]</button></li>[[ else ]]
        <li><a href="[[ $partial.Path ]]" treetop>[[ $partial.Name ]][[ if $partial.Default ]]*[[end]]</a></li>
        [[- end ]][[- end ]]
    [[ end ]]</ul>
    {{ block "[[ $block.Name ]]" .[[ $block.FieldName ]] }}
    <div id="[[ $block.Name  ]]">[[ $block.Name ]]</div>
    {{ end }}
[[ end ]]

    <script> window.TREETOP_CONFIG = {} </script>
    <script async src="https://rawgit.com/rur/treetop-client/v0.9.0/treetop.js"></script>
</body>
</html>`

// templates/mux.go.tmpl
var muxTempl = `package page

import (
	"net/http"
)

// Using an interface for router configuration
// can help to normalize router code.
type Mux interface {
	HandleGET(pattern string, handler http.Handler)
	HandlePOST(pattern string, handler http.Handler)
	Handle(pattern string, handler http.Handler)
}

// Demonstration for the the Go standard library 'Mux'
// EDITME: If you wish to use this approach for routing you will likely need
//         to implement the Mux interface in your own way.
type StandardMux struct {
	*http.ServeMux
}

func (s StandardMux) HandleGET(pattern string, handler http.Handler) {
	s.ServeMux.HandleFunc(pattern, func(w http.ResponseWriter, req *http.Request) {
		switch req.Method {
		case "GET", "HEAD":
			handler.ServeHTTP(w, req)
		default:
			// see https://tools.ietf.org/html/rfc7231#section-4
			http.Error(w, http.StatusText(http.StatusNotImplemented), http.StatusNotImplemented)
		}
	})
}

func (s StandardMux) HandlePOST(pattern string, handler http.Handler) {
	s.ServeMux.HandleFunc(pattern, func(w http.ResponseWriter, req *http.Request) {
		switch req.Method {
		case "POST":
			handler.ServeHTTP(w, req)
		default:
			// see https://tools.ietf.org/html/rfc7231#section-4
			http.Error(w, http.StatusText(http.StatusNotImplemented), http.StatusNotImplemented)
		}
	})
}
`

// templates/partial.html.tmpl
var partialTempl = `<div id="[[ .Extends ]]"[[ if .Merge ]] treetop-merge="[[ .Merge ]]"[[ end ]]>
    [[ if .Fragment ]]Fragment view named [[.Name]]
    [[- else ]]Partial view named [[.Name]][[ end ]]
    [[- range $index, $block := .Blocks ]]
    <h3>Block [[ $block.Name ]]</h3>
    <ul>
        [[ range $partial := $block.Partials ]]
        [[- if $partial.Path -]]
            [[- if $partial.POSTOnly -]]
            <li><form action="[[ $partial.Path ]]" method="POST" treetop><button>[[ $partial.Name ]][[ if $partial.Default ]]*[[end]]</button></form></li>
            [[- else -]][[- if $partial.Fragment -]]
            <li><button treetop-link="[[ $partial.Path ]]">[[ $partial.Name ]][[ if $partial.Default ]]*[[end]]</button></li>
            [[- else -]]
            <li><a href="[[ $partial.Path ]]" treetop>[[ $partial.Name ]][[ if $partial.Default ]]*[[end]]</a></li>
            [[- end -]][[- end -]]
        [[- end ]]
        [[ end ]]
    </ul>
    {{ block "[[ $block.Name ]]" .[[ $block.FieldName ]] }}
    <div id="[[ $block.Name  ]]"> default for block named [[ $block.Name ]] </div>
    {{ end }}
    [[ end ]]
</div>`

// templates/routes.go.tmpl
var routesTempl = `package {{ .Name }}

import (
	"github.com/rur/treetop"
	"{{ .Namespace }}/page"
)

func Routes(m page.Mux, exec treetop.ViewExecutor) {
	{{ block "routes" . }}
	{{ range $index, $view := .Views }}
	{{ $view.Assignment }} := treetop.NewView(
		"{{ $view.Template }}",
		{{ $view.Handler }},
	)
	{{ end }}
	{{ range $index, $entry := .Entries -}}
	{{ if eq $entry.Type "DefaultSubView" -}}
	{{ $entry.Assignment }} {{ $entry.Extends }}.NewDefaultSubView(
		"{{ $entry.Block }}",
		"{{ $entry.Template }}",
		{{ $entry.Handler }},
	)
	{{- else if eq $entry.Type "SubView" -}}
	{{ $entry.Assignment }} {{ $entry.Extends }}.NewSubView(
		"{{ $entry.Block }}",
		"{{ $entry.Template }}",
		{{ $entry.Handler }},
	)
	{{- else if eq $entry.Type "Spacer" }}
	// {{ $entry.Name }}
	{{- else -}}
	nil // unknown entry type: {{ $entry.Type }}
	{{- end }}
	{{ end }}{{ range $index, $route := .Routes }}
	m.Handle{{ $route.Method }}("{{ $route.Path }}",
		{{ if not $route.Includes }}exec.NewViewHandler({{ $route.Reference }})
		{{- else }}exec.NewViewHandler(
			{{ $route.Reference }},
			{{ range $index, $include := $route.Includes }}{{ $include }},
		{{end}})
		{{- end }}
	{{- if eq $route.Type "Page" }}.PageOnly()
	{{- else if eq $route.Type "Fragment" }}.FragmentOnly()
	{{- end }})
	{{- end }}
	{{ end }}
}
`

// templates/start.go.tmpl
var startTempl = `package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/rur/treetop"

	"{{ .Namespace }}/page"
	"{{ $.Namespace }}/page/{{ .PageName }}"
)

var (
	addr = ":8000"
)

func main() {
	m := http.NewServeMux()

	exec := treetop.FileExecutor{}

	{{ .PageName }}.Routes(
		page.StandardMux{ServeMux: m},
		&exec,
	)

	if errs := exec.FlushErrors(); len(errs) > 0 {
		log.Fatalf("Template errors:\n%s", errs)
	}

	fmt.Printf("Starting {{ $.Namespace }} server at %s", addr)
	// Bind to an addr and pass our router in
	log.Fatal(http.ListenAndServe(addr, m))
}

`
