package page

import (
	"net/http"
)

// Using an interface for router configuration
// can help to normalize router code.
type Mux interface {
	HandleGET(pattern string, handler http.Handler)
	HandlePOST(pattern string, handler http.Handler)
	Handle(pattern string, handler http.Handler)
}

// Demonstration for the the Go standard library 'Mux'
// EDITME: If you wish to use this approach for routing you will likely need
//         to implement the Mux interface in your own way.
type StandardMux struct {
	*http.ServeMux
}

func (s StandardMux) HandleGET(pattern string, handler http.Handler) {
	s.ServeMux.HandleFunc(pattern, func(w http.ResponseWriter, req *http.Request) {
		switch req.Method {
		case "GET", "HEAD":
			handler.ServeHTTP(w, req)
		default:
			// see https://tools.ietf.org/html/rfc7231#section-4
			http.Error(w, http.StatusText(http.StatusNotImplemented), http.StatusNotImplemented)
		}
	})
}

func (s StandardMux) HandlePOST(pattern string, handler http.Handler) {
	s.ServeMux.HandleFunc(pattern, func(w http.ResponseWriter, req *http.Request) {
		switch req.Method {
		case "POST":
			handler.ServeHTTP(w, req)
		default:
			// see https://tools.ietf.org/html/rfc7231#section-4
			http.Error(w, http.StatusText(http.StatusNotImplemented), http.StatusNotImplemented)
		}
	})
}
