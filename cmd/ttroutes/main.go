package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"strings"

	generate "github.com/rur/ttgen"
	writers "github.com/rur/ttgen/writers"
)

var generateUsage = `
Usage: ttroutes ./routemap.toml ./routes.go.templ ./routes.go
Write a routes file from routemap. This will overwrite an existing file at the destination


`

var genheader = `
// Code generated by go generate; DO NOT EDIT.

// This file was created by github.com/rur/ttgen/cmd/ttroutes
// Map file: %s
// Template file: %s

%s
`

func main() {
	if len(os.Args) < 4 {
		fmt.Printf(generateUsage)
		return
	}
	routemapFilePath := os.Args[1]

	data, err := ioutil.ReadFile(routemapFilePath)
	if err != nil {
		fmt.Printf("Error loading routemap file: %v", err)
		return
	}
	var routemap generate.RouteMap
	var decoder generate.RouteMapDecoder
	switch path.Ext(routemapFilePath) {
	case ".yml":
		decoder = generate.LoadYAMLRouteMap
	case ".yaml":
		decoder = generate.LoadYAMLRouteMap
	case ".tml":
		decoder = generate.LoadTOMLRouteMap
	case ".toml":
		decoder = generate.LoadTOMLRouteMap
	default:
		log.Fatalf("Unknown file extension for routemap file %s", routemapFilePath)
	}
	routemap, err = decoder(data)
	if err != nil {
		log.Fatalf("Error parsing routemap: %v", err)
	}

	templPath := os.Args[2]
	templData, err := ioutil.ReadFile(templPath)
	if err != nil {
		log.Fatalf("Error loading routes template file: %v", err)
	}
	// prefix routes template with generator heading
	routesTempl := fmt.Sprintf(
		genheader,
		routemapFilePath,
		templPath,
		string(templData),
	)

	destPath := os.Args[3]
	if !strings.HasSuffix(destPath, ".go") {
		log.Fatalf("Expecting destinationÂ files with .go suffix, got '%s'", destPath)
	}
	destDir := filepath.Dir(destPath)
	destFile := filepath.Base(destPath)

	if len(routemap.Views) == 0 {
		log.Fatalln("Routemap file does not have any views")
	}

	pageName, err := writers.SanitizeName(routemap.Page)
	if err != nil {
		log.Fatalf("Invalid page name '%s': %s", routemap.Page, err)
		return
	}

	_, err = writers.WriteRoutesFile(destDir, destFile, routemap.Views, routemap.Namespace, pageName, routesTempl)
	if err != nil {
		log.Fatalf("Error creating routes.go file for '%s'. %s", routemap.Page, err)
		return
	}
	// attempt to format the go code
	// this should not cause the generate command to fail if go fmt fails for some reason
	var fmtError []string

	cmd := exec.Command("go", "fmt", destPath)
	output, err := cmd.CombinedOutput()
	if err != nil {
		fmtError = append(fmtError, fmt.Sprintf("%s Error: %s\nOutput: %s", destPath, err, string(output)))
	}
	if len(fmtError) > 0 {
		log.Fatalf(
			"Generated folder but `go fmt` failed for the following files:\n\t%s",
			strings.Join(fmtError, "\n\t"),
		)
	}

}
